import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
class Pir{
	private byte x;
	private byte y;
	private byte direction;
	private int mirror;
	public Pir() {
		x = 0;
		y = 0;
	}
	public Pir(byte x, byte y, byte direction, int mirror) {
		this.x = x;
		this.y = y;
		this.direction = direction;
		this.mirror = mirror;
	}
	public byte getX() {
		return x;
	}
	public byte getY() {
		return y;
	}
	public byte getDirection() {
		return direction;
	}
	public int getMirror() {
		return mirror;
	}
}
public class N9376 {	
		static int max;
		static char[][] map;
		static int[][] dp;
		static Pir[] cloc;
		static byte[] dx = {0, 1, 0, -1};
		static byte[] dy = {1, 0, -1, 0};
		static Queue<Pir> q = new LinkedList<>();
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int W, H, count = 0;
		
		cloc = new Pir[2];
		W = sc.nextInt();
		H = sc.nextInt();
		map = new char[H][W];
		max = W * H;
		dp = new int[H][W];
		for(byte i = 0; i < H; i++) {
			String line = sc.next();
			for(byte j = 0; j < W; j++) {
				map[i][j] = line.charAt(j);
				if(map[i][j] == 'C')
					cloc[count++] = new Pir(i, j, i, -1);
			}
		}
		for(int i = 0; i < map.length; i++)
			for(int j = 0; j < map[0].length; j++)
				dp[i][j] = max; // 최대값
		
		for(byte i = 0; i < 4; i++) {
			byte x = (byte)(cloc[0].getX() + dx[i]);
			byte y = (byte)(cloc[0].getY() + dy[i]);
			if(x < 0 || x >= map.length || y < 0 || y >= map[0].length) continue;
			if(map[x][y] == '*') continue;
			q.add(new Pir(x, y, i, 0));			
			dp[x][y] = 0;	
		}				
		shootLaser();

		System.out.print(dp[cloc[1].getX()][cloc[1].getY()]);

		sc.close();

	}
	public static void shootLaser() {
		while(!q.isEmpty()) {
			Pir p = q.poll();			
			for(byte i = 0; i < 4; i++) {
				byte x = (byte)(p.getX() + dx[i]);
				byte y = (byte)(p.getY() + dy[i]);
				
				if(x < 0 || x >= map.length || y < 0 || y >=map[0].length) continue;
				if(map[x][y] == '*' || p.getMirror() > dp[p.getX()][p.getY()]) continue;				
				if(dp[x][y]!=max) {					
					byte tx = (byte)(x + dx[i]);
					byte ty = (byte)(y + dy[i]);
					if(!(tx < 0 || tx >= map.length || ty < 0 || ty >=map[0].length)) {
						if(dp[p.getX()][p.getY()] == dp[tx][ty])
							continue;
					}					
				}
				if(p.getDirection() == i) { // 같은 방향
					
					if(dp[x][y] >= dp[p.getX()][p.getY()]) {
						dp[x][y] = dp[p.getX()][p.getY()];				
						q.add(new Pir(x, y, i, dp[x][y] = dp[p.getX()][p.getY()]));
					}
					else 
						continue;									
				}
				else if((p.getDirection() + i) % 2 == 0) {//반대방향
					continue;
				}
				else { // 거울 사용
					if(dp[x][y] >= dp[p.getX()][p.getY()] + 1) {
						dp[x][y] = dp[p.getX()][p.getY()] + 1;	
						q.add(new Pir(x, y, i, dp[x][y] = dp[p.getX()][p.getY()] + 1));	
					}
					else 
						continue;
				}				
			}
		}			
	}
}
