#include <iostream>

using namespace std;

int possibleSeat(int n, const int N, int** arr, bool change) {
	if (n == N) {
		return 1;
	}
	if (arr[n][0] == -1 || arr[n + 1][0] == -1) {
		if (arr[n + 1][1] == 0)
   			arr[n + 1][1] = possibleSeat(n + 1, N, arr, true);
		return arr[n + 1][1];
	}
	if (change) {
		if (arr[n + 1][0] == 0) {
			arr[n + 1][0] = possibleSeat(n + 1, N, arr, false);
		}
		if (arr[n + 1][1] == 0) {
			arr[n + 1][1] = possibleSeat(n + 1, N, arr, true);
		}
		return arr[n + 1][0] + arr[n + 1][1];
	}
	else {
		if (arr[n + 1][1] == 0) {
			arr[n + 1][1] = possibleSeat(n + 1, N, arr, true);
		}
		return arr[n + 1][1];
	}

}
int main(void) {

	int N, M, m;

	cin >> N >> M;

	int** arr = new int*[N + 1];
	for (int i = 0; i <= N; i++) {
		arr[i] = new int[2];
	}
	for (int i = 0; i <= N; i++) 
		for (int j = 0; j < 2; j++)
			arr[i][j] = 0;
	arr[N][0] = 1; arr[N][1] = 1;
	for (int i = 0; i < M; i++) {
		cin >> m;
		arr[m][0] = -1;
	}

	cout << possibleSeat(1, N, arr, true);

	for (int i = 0; i < N; ++i) {
		delete[] arr[i];
	}
	delete[] arr;
  return 0;
}
