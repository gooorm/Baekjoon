#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<stdlib.h>

int getPossiblePath(int m, int n, int x, int y, int** way, int** memo, int* count) {
    

    if (x == (m - 1) && y == (n - 1)) {
        return 1;
    }

    memo[x][y] = 0;
    if (x + 1 < m && way[x + 1][y] < way[x][y]) {
        if (memo[x + 1][y] == -1)
            memo[x + 1][y] = getPossiblePath(m, n, x + 1, y, way, memo, count);
        memo[x][y] += memo[x + 1][y];
    }
    if (y + 1 < n && way[x][y + 1] < way[x][y]) {
        if (memo[x][y + 1] == -1)
            memo[x][y + 1] = getPossiblePath(m, n, x, y + 1, way, memo, count);
        memo[x][y] += memo[x][y + 1];
    }
    if (x - 1 >= 0 && way[x - 1][y] < way[x][y]) {
        if (memo[x - 1][y] == -1)
            memo[x - 1][y] = getPossiblePath(m, n, x - 1, y, way, memo, count);
        memo[x][y] += memo[x - 1][y];
    }
    if (y - 1 >= 0 && way[x][y - 1] < way[x][y]) {
        if (memo[x][y - 1] == -1)
            memo[x][y - 1] = getPossiblePath(m, n, x, y - 1, way, memo, count);
        memo[x][y] += memo[x][y - 1];
    }
    
    return memo[x][y];
}
int main(void) {
    int N, M, **way, **memo;
    int count[1] = { 0 };

    scanf("%d%d", &M, &N);
    way = (int**)malloc(sizeof(int*) * (M + 1));
    memo = (int**)malloc(sizeof(int*) * (M + 1));

    
    for (int i = 0; i <= M; i++) {
        way[i] = (int*)malloc(sizeof(int) * (N + 1));
        memo[i] = (int*)malloc(sizeof(int) * (N + 1));
    }
    

    for (int i = 0; i < M; i++) 
        for (int j = 0; j < N; j++) {
            scanf("%d", &way[i][j]);
            memo[i][j] = -1;
        }
        
    printf("%d", getPossiblePath(M, N, 0, 0, way, memo, count));

    for (int i = 0; i <= M; i++) {
        free(way[i]);
        free(memo[i]);
    }
    free(way);
    free(memo);
}
