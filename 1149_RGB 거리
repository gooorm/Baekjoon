#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
//k번째일 때, x색이 아닌 a, b 색 중 하나 선택하고 다음 집으로 넘어감
//그 경우 중 수가 작은 경우 선택
int getMinimum(int** avenue, int** min, int k, int n, int x) {
	int a = 0, b = 0;
	int aRet, bRet;

	if (k == n)
		return 0;
	
	switch (x) {
	case 0:
		a = 1;
		b = 2;
		break;
	case 1:
		a = 0;
		b = 2;
		break;
	case 2:
		a = 0;
		b = 1;
		break;
	}
	if(min[k + 1][a] == 0)
		min[k + 1][a] = getMinimum(avenue, min, k + 1, n, a);
	aRet = avenue[k][a] + min[k + 1][a];
	if (min[k + 1][b] == 0)
		min[k + 1][b] = getMinimum(avenue, min, k + 1, n, b);
	bRet = avenue[k][b] + min[k + 1][b];
	if (aRet < bRet)
		return aRet;
	else
		return bRet;
}
int Min(int a, int b, int c) {
	int m;

	m = a;
	if (m > b)
		m = b;
	if (m > c)
		m = c;
	return m;	
}
int main(void) {

	int N, r, g, b;
	int** avenue;
	int** min;	

	scanf("%d", &N);
	avenue = (int**)malloc(sizeof(int*) * (N + 1));
	min = (int**)malloc(sizeof(int*) * (N + 1));
	for (int i = 0; i <= N; i++) {
		avenue[i] = (int*)malloc(sizeof(int) * 3);
		min[i] = (int*)malloc(sizeof(int) * 3);
	}
	for (int i = 0; i < N; i++) 
		for (int j = 0; j < 3; j++) 
			scanf("%d", &avenue[i][j]);	
	for (int i = 0; i <= N; i++) 
		for (int j = 0; j < 3; j++) 
			min[i][j] = 0;

	r = avenue[0][0] + getMinimum(avenue, min, 1, N, 0);
	g = avenue[0][1] + getMinimum(avenue, min, 1, N, 1);
	b = avenue[0][2] + getMinimum(avenue, min, 1, N, 2);
	printf("%d", Min(r, g, b));

	for (int i = 0; i <= N; i++) {
		free(avenue[i]);
		free(min[i]);
	}
	free(avenue);
	free(min);
}
