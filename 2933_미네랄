/*메모리 초과가ㅋㅋ 뜹니다.............*/
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;
class Coo{
	private int x;
	private int y;
	public Coo(int x, int y) {
		this.x = x;
		this.y = y;
	}
	public int getX() {
		return x;		
	}
	public int getY() {
		return y;		
	}	
}

public class N2933 {	
	static int R, C, N, h;
	static char[][] map;
	static char[][] ground;	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);		

		R = sc.nextInt();
		C = sc.nextInt();
		map = new char[R][C];
		ground = new char[R][C];
		for(int i = 0; i < R; i++) {
			String line = sc.next();
			for(int j = 0; j < C; j++) 		
				map[i][j] = line.charAt(j);
		}		
		N = sc.nextInt();

			
		for(int i = 0; i < N; i++) {
			h = map.length - sc.nextInt();
			if(i % 2 == 0) {
				for(int j = 0; j < map[0].length; j++) 
					if(map[h][j] == 'x') {
						map[h][j] = '.';
						ground[h][j] = '.';
						break;
					}				
			}
			else {
				for(int j = map[0].length - 1; j >= 0; j--) 
					if(map[h][j] == 'x') {
						map[h][j] = '.';
						ground[h][j] = '.';
						break;
					}				
			}			
			findCluster();
		}
		
		for(int i = 0; i < map.length; i++) {
			for(int j = 0; j < map[0].length; j++)
				System.out.print(map[i][j]);
			System.out.println();
		}
		sc.close();
	}
	public static void findCluster() {
		boolean ret = false;
		ArrayList<Coo> cluster = new ArrayList<>();		
		for(int i = 0; i < map.length; i++)
			for(int j = 0; j < map[0].length; j++) 
				ground[i][j] = '.';

		BFS();
		for(int i = 0; i < map.length; i++)
			for(int j = 0; j < map[0].length; j++) {
				if(map[i][j] =='x' && ground[i][j] == '.') {
					cluster.add(new Coo(i, j));
					ret = true;
				}
			}		
		if(ret) {
			int height =  getHeight(map, cluster, ground);
			dropCluster(cluster, height);
		}
		cluster.clear();
	}
	public static int getHeight(char[][]map, ArrayList<Coo> cluster, char[][] ground) {
		int min = 100;
		for(int i = 0; i < cluster.size(); i++) {
			int h = 0;
			int x = cluster.get(i).getX();
			int y = cluster.get(i).getY();
			for(int j = x + 1; j < map.length; j++) {
				if(map[j][y] =='x' && ground[j][y] != '.')
					break;
				h++;
			}
			if(min > h)
				min = h;
		}
		return min;		
	}
	static byte[] dx = {-1, 1, 0, 0};
	static byte[] dy = {0, 0, -1, 1};	
	public static void BFS() {		
		Queue<Coo> q = new LinkedList<>();		
		for(int i = 0; i < map[0].length; i++) {			
			if(map[map.length - 1][i] == 'x' && ground[map.length - 1][i] == '.') {
				q.add(new Coo(map.length - 1, i));
				while(!q.isEmpty()) {
					Coo p = q.poll();
					ground[p.getX()][p.getY()] = 'x';
					for(int j = 0; j < 4 ; j++) {
						int x = p.getX() + dx[j];
						int y = p.getY() + dy[j];
						
						if(x < 0 || x >= map.length) continue;
						if(y < 0 || y >= map[0].length) continue;
						if(map[x][y] == '.') continue;
						if(ground[x][y] == 'x') continue;
						q.add(new Coo(x, y));
					}		
				}
			}						
		}
		q.clear();
	}
	public static void dropCluster(ArrayList<Coo> cluster, int h) {
		for(int i = 0; i < map.length; i++)
			for(int j = 0; j < map[0].length; j++)
				map[i][j] = ground[i][j];
		for(int i = 0; i < cluster.size(); i++) {
			int x = cluster.get(i).getX();
			int y = cluster.get(i).getY();
			map[x + h][y] = 'x';			
		}
	}
}
